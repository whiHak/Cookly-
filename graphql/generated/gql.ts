/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nmutation Register($full_name: String!, $email: String!, $password: String!, $username: String!) {\n  register(\n    full_name: $full_name\n    email: $email\n    password: $password\n    username: $username\n  ) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nquery GetUserProfile {\n  users {\n    id\n    username\n    email\n    full_name\n    created_at\n    updated_at\n  }\n}": typeof types.LoginDocument,
    "query GetAllRecipes($where: recipes_bool_exp, $order_by: [recipes_order_by!], $limit: Int, $offset: Int) {\n  recipes(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n  }\n  recipes_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecipeById($id: String!) {\n  recipes_by_pk(id: $id) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n    recipe_comments(order_by: {created_at: desc}) {\n      id\n      content\n      created_at\n      user {\n        id\n        full_name\n        username\n      }\n    }\n  }\n}\n\nquery GetUserBookmarks($user_id: String!) {\n  recipe_bookmarks(where: {user_id: {_eq: $user_id}}) {\n    recipe {\n      id\n      title\n      description\n      featured_image\n      price\n      user {\n        id\n        full_name\n        username\n      }\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteRecipe($id: String!) {\n  delete_recipes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation LikeRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_likes_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n    recipe {\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation UnlikeRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_likes(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n    returning {\n      recipe {\n        recipe_likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation BookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_bookmarks_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n  }\n}\n\nmutation UnbookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_bookmarks(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation RateRecipe($recipe_id: String!, $user_id: String!, $rating: Int!) {\n  insert_recipe_ratings_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, rating: $rating}\n    on_conflict: {constraint: recipe_ratings_pkey}\n  ) {\n    id\n    rating\n    recipe {\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation CommentOnRecipe($recipe_id: String!, $user_id: String!, $content: String!) {\n  insert_recipe_comments_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, content: $content}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nquery GetRecipeComments($recipe_id: String!) {\n  recipe_comments(\n    where: {recipe_id: {_eq: $recipe_id}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nmutation UpsertIngredient($id: String!, $name: String!) {\n  insert_ingredients_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: ingredients_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nmutation UpsertCategory($id: String!, $name: String!) {\n  insert_categories_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: categories_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nquery GetAllIngredients {\n  ingredients {\n    id\n    name\n  }\n}\n\nquery GetAllCategories {\n  categories {\n    id\n    name\n  }\n}\n\nmutation CreateRecipeWithAll($input: recipes_insert_input!) {\n  insert_recipes_one(object: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user_id\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_steps {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n  }\n}\n\nmutation UpdateRecipeWithAll($id: String!, $input: recipes_set_input!, $categories: [recipe_categories_insert_input!]!, $ingredients: [recipe_ingredients_insert_input!]!, $steps: [recipe_steps_insert_input!]!, $images: [recipe_images_insert_input!]!) {\n  update_recipes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n  }\n  insert_recipe_categories(objects: $categories) {\n    affected_rows\n  }\n  insert_recipe_ingredients(\n    objects: $ingredients\n    on_conflict: {constraint: recipe_ingredients_pkey, update_columns: [quantity, unit]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_steps(\n    objects: $steps\n    on_conflict: {constraint: recipe_steps_pkey, update_columns: [step_number, description, image_url]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_images(\n    objects: $images\n    on_conflict: {constraint: recipe_images_pkey, update_columns: [image_url, is_featured]}\n  ) {\n    affected_rows\n  }\n}": typeof types.GetAllRecipesDocument,
};
const documents: Documents = {
    "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nmutation Register($full_name: String!, $email: String!, $password: String!, $username: String!) {\n  register(\n    full_name: $full_name\n    email: $email\n    password: $password\n    username: $username\n  ) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nquery GetUserProfile {\n  users {\n    id\n    username\n    email\n    full_name\n    created_at\n    updated_at\n  }\n}": types.LoginDocument,
    "query GetAllRecipes($where: recipes_bool_exp, $order_by: [recipes_order_by!], $limit: Int, $offset: Int) {\n  recipes(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n  }\n  recipes_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecipeById($id: String!) {\n  recipes_by_pk(id: $id) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n    recipe_comments(order_by: {created_at: desc}) {\n      id\n      content\n      created_at\n      user {\n        id\n        full_name\n        username\n      }\n    }\n  }\n}\n\nquery GetUserBookmarks($user_id: String!) {\n  recipe_bookmarks(where: {user_id: {_eq: $user_id}}) {\n    recipe {\n      id\n      title\n      description\n      featured_image\n      price\n      user {\n        id\n        full_name\n        username\n      }\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteRecipe($id: String!) {\n  delete_recipes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation LikeRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_likes_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n    recipe {\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation UnlikeRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_likes(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n    returning {\n      recipe {\n        recipe_likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation BookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_bookmarks_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n  }\n}\n\nmutation UnbookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_bookmarks(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation RateRecipe($recipe_id: String!, $user_id: String!, $rating: Int!) {\n  insert_recipe_ratings_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, rating: $rating}\n    on_conflict: {constraint: recipe_ratings_pkey}\n  ) {\n    id\n    rating\n    recipe {\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation CommentOnRecipe($recipe_id: String!, $user_id: String!, $content: String!) {\n  insert_recipe_comments_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, content: $content}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nquery GetRecipeComments($recipe_id: String!) {\n  recipe_comments(\n    where: {recipe_id: {_eq: $recipe_id}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nmutation UpsertIngredient($id: String!, $name: String!) {\n  insert_ingredients_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: ingredients_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nmutation UpsertCategory($id: String!, $name: String!) {\n  insert_categories_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: categories_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nquery GetAllIngredients {\n  ingredients {\n    id\n    name\n  }\n}\n\nquery GetAllCategories {\n  categories {\n    id\n    name\n  }\n}\n\nmutation CreateRecipeWithAll($input: recipes_insert_input!) {\n  insert_recipes_one(object: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user_id\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_steps {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n  }\n}\n\nmutation UpdateRecipeWithAll($id: String!, $input: recipes_set_input!, $categories: [recipe_categories_insert_input!]!, $ingredients: [recipe_ingredients_insert_input!]!, $steps: [recipe_steps_insert_input!]!, $images: [recipe_images_insert_input!]!) {\n  update_recipes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n  }\n  insert_recipe_categories(objects: $categories) {\n    affected_rows\n  }\n  insert_recipe_ingredients(\n    objects: $ingredients\n    on_conflict: {constraint: recipe_ingredients_pkey, update_columns: [quantity, unit]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_steps(\n    objects: $steps\n    on_conflict: {constraint: recipe_steps_pkey, update_columns: [step_number, description, image_url]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_images(\n    objects: $images\n    on_conflict: {constraint: recipe_images_pkey, update_columns: [image_url, is_featured]}\n  ) {\n    affected_rows\n  }\n}": types.GetAllRecipesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nmutation Register($full_name: String!, $email: String!, $password: String!, $username: String!) {\n  register(\n    full_name: $full_name\n    email: $email\n    password: $password\n    username: $username\n  ) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nquery GetUserProfile {\n  users {\n    id\n    username\n    email\n    full_name\n    created_at\n    updated_at\n  }\n}"): (typeof documents)["mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nmutation Register($full_name: String!, $email: String!, $password: String!, $username: String!) {\n  register(\n    full_name: $full_name\n    email: $email\n    password: $password\n    username: $username\n  ) {\n    token\n    user {\n      id\n      username\n      email\n      full_name\n    }\n  }\n}\n\nquery GetUserProfile {\n  users {\n    id\n    username\n    email\n    full_name\n    created_at\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllRecipes($where: recipes_bool_exp, $order_by: [recipes_order_by!], $limit: Int, $offset: Int) {\n  recipes(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n  }\n  recipes_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecipeById($id: String!) {\n  recipes_by_pk(id: $id) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n    recipe_comments(order_by: {created_at: desc}) {\n      id\n      content\n      created_at\n      user {\n        id\n        full_name\n        username\n      }\n    }\n  }\n}\n\nquery GetUserBookmarks($user_id: String!) {\n  recipe_bookmarks(where: {user_id: {_eq: $user_id}}) {\n    recipe {\n      id\n      title\n      description\n      featured_image\n      price\n      user {\n        id\n        full_name\n        username\n      }\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteRecipe($id: String!) {\n  delete_recipes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation LikeRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_likes_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n    recipe {\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation UnlikeRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_likes(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n    returning {\n      recipe {\n        recipe_likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation BookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_bookmarks_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n  }\n}\n\nmutation UnbookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_bookmarks(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation RateRecipe($recipe_id: String!, $user_id: String!, $rating: Int!) {\n  insert_recipe_ratings_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, rating: $rating}\n    on_conflict: {constraint: recipe_ratings_pkey}\n  ) {\n    id\n    rating\n    recipe {\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation CommentOnRecipe($recipe_id: String!, $user_id: String!, $content: String!) {\n  insert_recipe_comments_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, content: $content}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nquery GetRecipeComments($recipe_id: String!) {\n  recipe_comments(\n    where: {recipe_id: {_eq: $recipe_id}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nmutation UpsertIngredient($id: String!, $name: String!) {\n  insert_ingredients_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: ingredients_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nmutation UpsertCategory($id: String!, $name: String!) {\n  insert_categories_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: categories_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nquery GetAllIngredients {\n  ingredients {\n    id\n    name\n  }\n}\n\nquery GetAllCategories {\n  categories {\n    id\n    name\n  }\n}\n\nmutation CreateRecipeWithAll($input: recipes_insert_input!) {\n  insert_recipes_one(object: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user_id\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_steps {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n  }\n}\n\nmutation UpdateRecipeWithAll($id: String!, $input: recipes_set_input!, $categories: [recipe_categories_insert_input!]!, $ingredients: [recipe_ingredients_insert_input!]!, $steps: [recipe_steps_insert_input!]!, $images: [recipe_images_insert_input!]!) {\n  update_recipes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n  }\n  insert_recipe_categories(objects: $categories) {\n    affected_rows\n  }\n  insert_recipe_ingredients(\n    objects: $ingredients\n    on_conflict: {constraint: recipe_ingredients_pkey, update_columns: [quantity, unit]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_steps(\n    objects: $steps\n    on_conflict: {constraint: recipe_steps_pkey, update_columns: [step_number, description, image_url]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_images(\n    objects: $images\n    on_conflict: {constraint: recipe_images_pkey, update_columns: [image_url, is_featured]}\n  ) {\n    affected_rows\n  }\n}"): (typeof documents)["query GetAllRecipes($where: recipes_bool_exp, $order_by: [recipes_order_by!], $limit: Int, $offset: Int) {\n  recipes(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n  }\n  recipes_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecipeById($id: String!) {\n  recipes_by_pk(id: $id) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user {\n      id\n      full_name\n      username\n    }\n    recipe_steps(order_by: {step_number: asc}) {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n    recipe_likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    recipe_likes {\n      user_id\n    }\n    recipe_bookmarks {\n      user_id\n    }\n    recipe_ratings_aggregate {\n      aggregate {\n        avg {\n          rating\n        }\n        count\n      }\n    }\n    recipe_comments(order_by: {created_at: desc}) {\n      id\n      content\n      created_at\n      user {\n        id\n        full_name\n        username\n      }\n    }\n  }\n}\n\nquery GetUserBookmarks($user_id: String!) {\n  recipe_bookmarks(where: {user_id: {_eq: $user_id}}) {\n    recipe {\n      id\n      title\n      description\n      featured_image\n      price\n      user {\n        id\n        full_name\n        username\n      }\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation DeleteRecipe($id: String!) {\n  delete_recipes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation LikeRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_likes_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n    recipe {\n      recipe_likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation UnlikeRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_likes(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n    returning {\n      recipe {\n        recipe_likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation BookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  insert_recipe_bookmarks_one(object: {recipe_id: $recipe_id, user_id: $user_id}) {\n    id\n  }\n}\n\nmutation UnbookmarkRecipe($recipe_id: String!, $user_id: String!) {\n  delete_recipe_bookmarks(\n    where: {recipe_id: {_eq: $recipe_id}, user_id: {_eq: $user_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation RateRecipe($recipe_id: String!, $user_id: String!, $rating: Int!) {\n  insert_recipe_ratings_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, rating: $rating}\n    on_conflict: {constraint: recipe_ratings_pkey}\n  ) {\n    id\n    rating\n    recipe {\n      recipe_ratings_aggregate {\n        aggregate {\n          avg {\n            rating\n          }\n          count\n        }\n      }\n    }\n  }\n}\n\nmutation CommentOnRecipe($recipe_id: String!, $user_id: String!, $content: String!) {\n  insert_recipe_comments_one(\n    object: {recipe_id: $recipe_id, user_id: $user_id, content: $content}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nquery GetRecipeComments($recipe_id: String!) {\n  recipe_comments(\n    where: {recipe_id: {_eq: $recipe_id}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    content\n    created_at\n    user {\n      id\n      full_name\n      username\n    }\n  }\n}\n\nmutation UpsertIngredient($id: String!, $name: String!) {\n  insert_ingredients_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: ingredients_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nmutation UpsertCategory($id: String!, $name: String!) {\n  insert_categories_one(\n    object: {id: $id, name: $name}\n    on_conflict: {constraint: categories_pkey, update_columns: []}\n  ) {\n    id\n    name\n  }\n}\n\nquery GetAllIngredients {\n  ingredients {\n    id\n    name\n  }\n}\n\nquery GetAllCategories {\n  categories {\n    id\n    name\n  }\n}\n\nmutation CreateRecipeWithAll($input: recipes_insert_input!) {\n  insert_recipes_one(object: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n    user_id\n    recipe_categories {\n      id\n      category {\n        id\n        name\n      }\n    }\n    recipe_ingredients {\n      id\n      quantity\n      unit\n      ingredient {\n        id\n        name\n      }\n    }\n    recipe_steps {\n      id\n      step_number\n      description\n      image_url\n    }\n    recipe_images {\n      id\n      image_url\n      is_featured\n    }\n  }\n}\n\nmutation UpdateRecipeWithAll($id: String!, $input: recipes_set_input!, $categories: [recipe_categories_insert_input!]!, $ingredients: [recipe_ingredients_insert_input!]!, $steps: [recipe_steps_insert_input!]!, $images: [recipe_images_insert_input!]!) {\n  update_recipes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    title\n    description\n    difficulty\n    servings\n    preparation_time\n    featured_image\n    price\n  }\n  insert_recipe_categories(objects: $categories) {\n    affected_rows\n  }\n  insert_recipe_ingredients(\n    objects: $ingredients\n    on_conflict: {constraint: recipe_ingredients_pkey, update_columns: [quantity, unit]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_steps(\n    objects: $steps\n    on_conflict: {constraint: recipe_steps_pkey, update_columns: [step_number, description, image_url]}\n  ) {\n    affected_rows\n  }\n  insert_recipe_images(\n    objects: $images\n    on_conflict: {constraint: recipe_images_pkey, update_columns: [image_url, is_featured]}\n  ) {\n    affected_rows\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;